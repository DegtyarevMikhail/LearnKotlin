package example

class Parent {
    private val first: String = "first"// видно только внутри класса Parent
    protected val second: String = "second"// видно внутри Parent и его наследников
    val third: String = "third"// public по умолчанию — видно везде

    protected class Inner {// класс виден только наследникам Parent
    private val fourth: String = "fourth"// видно только внутри класса Inner
    }

}
/*
В Kotlin есть четыре вида модификаторов доступа:
public, internal, protected и private.
Они применяются к классам, интерфейсам, конструкторам,
свойствам и их сеттерам и функциям. Рассмотрим, как изменяют видимость модификаторы:
public виден везде.
internal виден внутри модуля.
Это может быть модуль в Android-приложении или всё приложение,
если оно состоит из одного модуля.
protected виден в классах-наследниках.
Если в классе-наследнике не установлен другой модификатор, он остаётся protected.
private виден только внутри класса или файла,
если это функция или переменная верхнего уровня.


Модификатор inner используется для классов,
объявленных внутри другого класса, и обозначает их как внутренние.
По умолчанию классы, объявленные без модификатора inner,
считаются самостоятельными — static в понятиях Java.

 */